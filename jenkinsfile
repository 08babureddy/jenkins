pipeline {
    agent any
    environment {
        WORKSPACE = "${env.WORKSPACE}"
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    sh 'python3 -m venv venv'
                    sh 'source venv/bin/activate && pip install -r requirements.txt'
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Run behave and store output
                    def test_output = sh(
                        script: '''
                            source venv/bin/activate
                            python -m behave --tags ${tagname} 2>&1 | tee output.log
                        ''',
                        returnStdout: true
                    ).trim()

                    // Extract folder name using awk for more reliable parsing
                    def current_run_folder = sh(
                        script: '''
                            awk '/TEST_REPORT_PATH=/ {print $1}' output.log | cut -d'=' -f2
                        ''',
                        returnStdout: true
                    ).trim()

                    // Set environment variable
                    env.CURRENT_RUN_FOLDER = current_run_folder
                    
                    echo "Current Run Folder: ${env.CURRENT_RUN_FOLDER}"
                }
                
            }
        }
    }
    post {
        always {
               script {         
                def pipeline_name = env.JOB_NAME
                def build_number = currentBuild.number
                def buildStatus = currentBuild.result ?: 'UNKNOWN'
                
                def results_folder_path = "${WORKSPACE}/results"
                def html_folder_path = "${results_folder_path}/html/${env.CURRENT_RUN_FOLDER}"
                def xml_folder_path = "${results_folder_path}/xml/${env.CURRENT_RUN_FOLDER}"
                
                // Parse XML files and collect test results
                def testResults = [:]
                def totalTests = 0
                def failedTests = 0
                def passedTests = 0
                
                // Create HTML table for failed tests
                def failedTestsTable = """
                    <table border="1" style="border-collapse: collapse; width: 100%;">
                        <tr style="background-color: #f2f2f2;">
                            <th style="padding: 8px; text-align: left;">Feature</th>
                            <th style="padding: 8px; text-align: left;">Scenario</th>
                            <th style="padding: 8px; text-align: left;">Status</th>
                        </tr>
                """
                
                // Read and parse XML files
                sh(script: "ls -1 ${xml_folder_path}/*.xml").split('\n').each { xmlFile ->
                    def xmlContent = readFile(xmlFile)
                    def parser = new XmlParser()
                    def testsuites = parser.parseText(xmlContent)
                    
                    testsuites.testsuite.each { testsuite ->
                        testsuite.testcase.each { testcase ->
                            totalTests++
                            
                            def featureName = testcase.@classname
                            def scenarioName = testcase.@name
                            def failed = testcase.failure.size() > 0
                            
                            if (failed) {
                                failedTests++
                                failedTestsTable += """
                                    <tr>
                                        <td style="padding: 8px;">${featureName}</td>
                                        <td style="padding: 8px;">${scenarioName}</td>
                                        <td style="padding: 8px; color: red;">FAILED</td>
                                    </tr>
                                """
                            } else {
                                passedTests++
                            }
                        }
                    }
                }
                
                failedTestsTable += "</table>"
                
                // Calculate percentages
                def passPercentage = (passedTests / totalTests * 100).round(2)
                def failPercentage = (failedTests / totalTests * 100).round(2)
                
                // Create summary section
                def summarySection = """
                    <div style="margin-bottom: 20px;">
                        <h3>Test Execution Summary:</h3>
                        <ul>
                            <li>Total Tests: ${totalTests}</li>
                            <li>Passed: ${passedTests} (${passPercentage}%)</li>
                            <li>Failed: ${failedTests} (${failPercentage}%)</li>
                        </ul>
                    </div>
                """
                
                // Send email with results
                emailext(
                    subject: "${pipeline_name} - Build #${build_number} - ${buildStatus} (Pass: ${passPercentage}%, Fail: ${failPercentage}%)",
                    body: """
                        <html>
                        <body>
                            <h2 style="color: #333;">Test Results for Build ${build_number}</h2>
                            ${summarySection}
                            
                            <h3 style="color: #333;">Failed Test Cases:</h3>
                            ${failedTestsTable}
                            
                            <p>Full report: <a href="file://${html_folder_path}">View HTML Report</a></p>
                        </body>
                        </html>
                    """,
                    to: 'chinnareddy.b@datapoem.com',
                    mimeType: 'text/html',
                    attachmentsPattern: "results/html/${env.CURRENT_RUN_FOLDER}/*.html"
                )
            }
        }
    }
}
