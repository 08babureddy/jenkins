pipeline {
    agent any
    environment {
        WORKSPACE = "${env.WORKSPACE}"
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    sh 'python3 -m venv venv'
                    sh 'source venv/bin/activate && pip install -r requirements.txt'
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Run behave and store output
                    def test_output = sh(
                        script: '''
                            source venv/bin/activate
                            python -m behave --tags ${tagname} 2>&1 | tee output.log
                        ''',
                        returnStdout: true
                    ).trim()

                    // Extract folder name using awk for more reliable parsing
                    def current_run_folder = sh(
                        script: '''
                            awk '/TEST_REPORT_PATH=/ {print $1}' output.log | cut -d'=' -f2
                        ''',
                        returnStdout: true
                    ).trim()

                    // Set environment variable
                    env.CURRENT_RUN_FOLDER = current_run_folder
                    echo "Current Run Folder: ${env.CURRENT_RUN_FOLDER}"
                }
            }
        }
    }
    post {
        always {
            script {
                import groovy.util.XmlSlurper
                def pipeline_name = env.JOB_NAME
                def build_number = currentBuild.number
                def buildStatus = currentBuild.result ?: 'UNKNOWN'

                def results_folder_path = "${WORKSPACE}/results"
                def html_folder_path = "${results_folder_path}/html/${env.CURRENT_RUN_FOLDER}"
                def xml_folder_path = "${results_folder_path}/xml/${env.CURRENT_RUN_FOLDER}"
                echo "HTML Report Path: ${html_folder_path}"

                def html_file_path = sh(script: "ls -t ${html_folder_path}/*.html | head -n 1", returnStdout: true).trim()
                def latest_html_file_name = sh(script: "basename \"${html_file_path}\"", returnStdout: true).trim()

                def sendEmailWithFailedTests = {
                    def failedTests = []
                    
                    def xmlFiles = new File(xml_folder_path).listFiles().findAll { it.name.endsWith('.xml') }
                    
                    xmlFiles.each { file ->
                        def xml = new XmlSlurper().parse(file)
                        def suiteName = xml.@name.text()
                        
                        xml.testcase.each { testcase ->
                            if (testcase.failure || testcase.error) {
                                def testCaseName = testcase.@name.text()
                                failedTests << [suiteName, testCaseName]
                            }
                        }
                    }
                    def tableRows = failedTests.isEmpty() ? 
                        "<tr><td colspan='2' style='text-align:center;'>No Failed Test Cases</td></tr>" :
                        failedTests.collect { "<tr><td>${it[0]}</td><td>${it[1]}</td></tr>" }.join("\n")

                    def emailBody = """
                        <html>
                        <body>
                            <h2>Test Execution Report</h2>
                            <h3>Failed Test Cases</h3>
                            <table border="1" cellspacing="0" cellpadding="5">
                                <tr><th>Test Suite</th><th>Test Case</th></tr>
                                ${tableRows}
                            </table>
                        </body>
                        </html>
                    """

                    emailext(
                        subject: "${pipeline_name} - Build #${build_number} - ${buildStatus}",
                        body: """
                            <h3 style="color: green;">Test Results for Build ${build_number}</h3>
                            <p>Status: ${buildStatus}</p>
                            ${emailBody}
                            <p>Click <a href="file://${html_folder_path}/${latest_html_file_name}">here</a> to view the HTML report.</p>
                        """,
                        to: 'chinnareddy.b@datapoem.com',
                        mimeType: 'text/html',
                        attachmentsPattern: "results/html/${env.CURRENT_RUN_FOLDER}/*.html"
                    )
}
                // Call the function to send the email
                sendEmailWithFailedTests()
            }
        }
    }
}
