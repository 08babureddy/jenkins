pipeline {
    agent any
    environment {
        WORKSPACE = "${env.WORKSPACE}"
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    sh 'python3 -m venv venv'
                    sh 'source venv/bin/activate && pip install -r requirements.txt'
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Run behave and store output
                    def test_output = sh(
                        script: '''
                            source venv/bin/activate
                            python -m behave --tags ${tagname} 2>&1 | tee output.log
                        ''',
                        returnStdout: true
                    ).trim()

                    // Extract folder name using awk for more reliable parsing
                    def current_run_folder = sh(
                        script: '''
                            awk '/TEST_REPORT_PATH=/ {print $1}' output.log | cut -d'=' -f2
                        ''',
                        returnStdout: true
                    ).trim()

                    // Set environment variable
                    env.CURRENT_RUN_FOLDER = current_run_folder
                    echo "Current Run Folder: ${env.CURRENT_RUN_FOLDER}"
                }
            }
        }
    }
    post {
        always {
            script {
                def pipeline_name = env.JOB_NAME
                def build_number = currentBuild.number
                def buildStatus = currentBuild.result ?: 'UNKNOWN'

                def results_folder_path = "${WORKSPACE}/results"
                def html_folder_path = "${results_folder_path}/html/${env.CURRENT_RUN_FOLDER}"
                def xml_folder_path = "${results_folder_path}/xml/${env.CURRENT_RUN_FOLDER}"
                echo "HTML Report Path: ${html_folder_path}"

                def html_file_path = sh(script: "ls -t ${html_folder_path}/*.html | head -n 1", returnStdout: true).trim()
                def latest_html_file_name = sh(script: "basename \"${html_file_path}\"", returnStdout: true).trim()

                // Parse XML files using readFile and XmlParser
            def failedTests = []
            def totalTests = 0
            def passedTests = 0

            // Get list of XML files
            def xmlFiles = sh(script: "ls ${xml_folder_path}/*.xml", returnStdout: true).trim().split('\n')
            
            xmlFiles.each { xmlFile ->
                def xmlContent = readFile(xmlFile)
                def parser = new XmlParser()
                def testsuite = parser.parseText(xmlContent)
                
                testsuite.testcase.each { testcase ->
                    totalTests++
                    def suiteName = testcase.@classname.toString()
                    def testName = testcase.@name.toString()
                    
                    if (testcase.failure) {
                        failedTests << [suite: suiteName, test: testName]
                    } else {
                        passedTests++
                    }
                }
            }

            // Create table rows for test results
            def tableRows = failedTests.isEmpty() ? 
                "<tr><td colspan='2' style='text-align:center;'>No Failed Test Cases</td></tr>" :
                failedTests.collect { test ->
                    """<tr>
                        <td style='padding:8px;border:1px solid #ddd'>${test.suite}</td>
                        <td style='padding:8px;border:1px solid #ddd'>${test.test}</td>
                    </tr>"""
                }.join("\n")

            // Calculate percentages
            def passPercentage = (passedTests / totalTests * 100).round(2)
            def failPercentage = ((totalTests - passedTests) / totalTests * 100).round(2)

            // Create email body
            def emailBody = """
                <html>
                <body style='font-family: Arial, sans-serif;'>
                    <h2>Test Execution Report</h2>
                    <div style='margin-bottom: 20px;'>
                        <h3>Summary:</h3>
                        <ul>
                            <li>Total Tests: ${totalTests}</li>
                            <li>Passed: ${passedTests} (${passPercentage}%)</li>
                            <li>Failed: ${totalTests - passedTests} (${failPercentage}%)</li>
                        </ul>
                    </div>
                    
                    <h3>Failed Test Cases:</h3>
                    <table style='border-collapse: collapse; width: 100%;'>
                        <tr style='background-color: #f2f2f2;'>
                            <th style='padding: 8px; border: 1px solid #ddd;'>Test Suite</th>
                            <th style='padding: 8px; border: 1px solid #ddd;'>Test Case</th>
                        </tr>
                        ${tableRows}
                    </table>
                    
                    <p>Click <a href="file://${html_folder_path}/${latest_html_file_name}">here</a> to view the detailed HTML report.</p>
                </body>
                </html>
            """
                

                emailext(
                        subject: "${pipeline_name} - Build #${build_number} - ${buildStatus}",
                        body: """
                            <h3 style="color: green;">Test Results for Build ${build_number}</h3>
                            <p>Status: ${buildStatus}</p>
                            ${emailBody}
                            <p>Click <a href="file://${html_folder_path}/${latest_html_file_name}">here</a> to view the HTML report.</p>
                        """,
                        to: 'chinnareddy.b@datapoem.com',
                        mimeType: 'text/html',
                        attachmentsPattern: "results/html/${env.CURRENT_RUN_FOLDER}/*.html"
                    )
            }
        }
    }
}
